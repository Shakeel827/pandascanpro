import React from 'react'
import { motion } from 'framer-motion'
import { AlertTriangle, CheckCircle, Info, XCircle } from 'lucide-react'

interface VulnerabilityCardProps {
  title: string
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info'
  description: string
  details?: string[]
  recommendation?: string
  cvss?: number
}

const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({
  title,
  severity,
  description,
  details = [],
  recommendation,
  cvss
}) => {
  const getSeverityConfig = (severity: string) => {
    switch (severity) {
      case 'critical':
        return {
          icon: XCircle,
          color: 'text-purple-400',
          bg: 'bg-purple-500/20',
          border: 'border-purple-500/30',
          glow: 'shadow-purple-500/20'
        }
      case 'high':
        return {
          icon: AlertTriangle,
          color: 'text-red-400',
          bg: 'bg-red-500/20',
          border: 'border-red-500/30',
          glow: 'shadow-red-500/20'
        }
      case 'medium':
        return {
          icon: AlertTriangle,
          color: 'text-yellow-400',
          bg: 'bg-yellow-500/20',
          border: 'border-yellow-500/30',
          glow: 'shadow-yellow-500/20'
        }
      case 'low':
        return {
          icon: Info,
          color: 'text-blue-400',
          bg: 'bg-blue-500/20',
          border: 'border-blue-500/30',
          glow: 'shadow-blue-500/20'
        }
      default:
        return {
          icon: CheckCircle,
          color: 'text-green-400',
          bg: 'bg-green-500/20',
          border: 'border-green-500/30',
          glow: 'shadow-green-500/20'
        }
    }
  }

  const config = getSeverityConfig(severity)
  const Icon = config.icon

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      whileHover={{ y: -5 }}
      className={`glass-effect rounded-xl p-6 border-l-4 ${config.border} hover:${config.glow} hover:shadow-xl transition-all duration-300`}
    >
      {/* Header */}
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className={`w-10 h-10 ${config.bg} rounded-lg flex items-center justify-center`}>
            <Icon className={`w-5 h-5 ${config.color}`} />
          </div>
          <div>
            <h3 className="font-semibold text-white text-lg">{title}</h3>
            <div className="flex items-center space-x-2 mt-1">
              <span className={`px-2 py-1 rounded-full text-xs font-medium border ${config.color} ${config.bg} ${config.border}`}>
                {severity.toUpperCase()}
              </span>
              {cvss && (
                <span className="text-xs text-slate-400">
                  CVSS: {cvss.toFixed(1)}
                </span>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Description */}
      <p className="text-slate-300 mb-4 leading-relaxed">{description}</p>

      {/* Details */}
      {details.length > 0 && (
        <div className="mb-4">
          <h4 className="text-sm font-medium text-slate-300 mb-2">Details:</h4>
          <ul className="space-y-1">
            {details.map((detail, index) => (
              <li key={index} className="text-sm text-slate-400 flex items-start">
                <span className="w-1.5 h-1.5 bg-primary-400 rounded-full mt-2 mr-2 flex-shrink-0" />
                {detail}
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Recommendation */}
      {recommendation && (
        <div className="mt-4 p-3 bg-dark-800/50 rounded-lg border border-slate-700">
          <h4 className="text-sm font-medium text-green-300 mb-1">Recommendation:</h4>
          <p className="text-sm text-slate-300">{recommendation}</p>
        </div>
      )}
    </motion.div>
  )
}

export default VulnerabilityCard